stages:
  - build
  - test
  - release
  - deploy
  - notify

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

include:
  - template: Security/SAST.gitlab-ci.yml

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

spotbugs-sast:
  stage: test
  variables:
    COMPILE: "true"
    SAST_JAVA_VERSION: 11

sonarqube-backend-sast:
  image: maven:3.8-openjdk-16
  stage: test
  variables:
    SPRING_FLYWAY_ENABLED: "false"
  script:
    - cd backend
    - mvn verify sonar:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectKey=$SONAR_BACKEND_KEY -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN_BACKEND -Dsonar.projectName=$SONAR_BACKEND_KEY

release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  cache: []
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA latest
  when: manual

deploy:
  stage: deploy
  image: docker:25.0.1-dind
  before_script:
    - apk add openssh-client gettext bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - SSH_KNOWN_HOSTS=$(ssh-keyscan -p ${DEV_SSH_PORT} ${DEV_HOST})
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "SPRING_DATASOURCE_URL=\"jdbc:postgresql://${BACKEND_PSQL_HOST}:${BACKEND_PSQL_PORT}/${BACKEND_PSQL_DBNAME}?ssl=true\"" >> ./.backend.env
    - echo "SPRING_DATASOURCE_USERNAME=\"${BACKEND_PSQL_USER}\"" >> ./.backend.env
    - echo "SPRING_DATASOURCE_PASSWORD=\"${BACKEND_PSQL_PASSWORD}\"" >> ./.backend.env
    - echo "SPRING_DATA_MONGODB_URI=\"mongodb://${BACKEND_MONGO_USER}:${BACKEND_MONGO_PASSWORD}@${BACKEND_MONGO_HOST}:${BACKEND_MONGO_PORT}/${BACKEND_MONGO_DATABASE}?tls=true\"" >> ./.backend.env
    - touch ./.report.env
    - touch ./.frontend.env
    - touch ./.certbot.env
  script:
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}:${DEV_SSH_PORT}"
    - docker context use remote
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    # Проверяем, какой контейнер запущен
    - current_container=$(docker ps --format '{{.Names}}' | grep 'blue' || true)
    - if [[ -z "$current_container" ]]; then
      current_container=$(docker ps --format '{{.Names}}' | grep 'green' || true);
      replacement_containers=$(docker ps -a --format '{{.Names}}' | grep 'blue' || true);
      service_name=blue;
      else
      replacement_containers=$(docker ps -a --format '{{.Names}}' | grep 'green' || true);
      service_name=green;
      fi
    # Запускаем обновленные контейнер
    - if [[ -z "$current_containers" ]]; then
      old_containers=$(docker ps --format '{{.Names}}' | grep 'sausage-store-backend' || true);
      if [[ -n "$old_containers" ]]; then
      docker stop $old_containers;
      fi;
      docker compose up -d --force-recreate --pull always --no-deps $service_name;
      else
      docker compose build --pull $service_name;
      for container in $replacement_containers; do
      docker stop $container;
      docker rm $container;
      docker compose run -d --name $container $service_name;
      done
      fi
    - start_time=0
    - while ! docker inspect --format '{{.State.Health.Status}}' $replacement_containers | grep -q healthy; do
      sleep 5;
      start_time=$((start_time+5));
      if [ $start_time -gt 300 ]; then
      echo "Ошибка:\ контейнер не стал здоровым за минуту";
      exit 1;
      fi;
      done;
    - docker stop $current_container
  when: manual

telegram-notification-backend:
  stage: notify
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\": \"$TELEGRAM_ID\", \"text\": \"std-022-044 собрал приложение backend. Artifacts: $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job\"}" "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage"'
  when: manual
