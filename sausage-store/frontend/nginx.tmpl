{{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
upstream {{ $host }} {

{{ range $index, $value := $containers }}
    {{ with $address := index $value.Addresses 0 }}
    server {{ $value.Hostname }}:{{ $address.Port }};
    {{ end }}
{{ end }}

}

proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=all:64m inactive=2h max_size=100m;

server {
    listen 80 default_server;

    server_name _;

    return 301 https://$host$request_uri;
}

server {
  listen 443 default_server ssl http2;
  listen [::]:443 ssl http2;

  ssl_certificate /etc/letsencrypt/live/{{ $.Env.DOMAIN }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ $.Env.DOMAIN }}/privkey.pem;

  root /app/frontend;
  index index.html;
  server_name _;

  open_file_cache          max=1000 inactive=20s;
  open_file_cache_valid    30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors   on;

  client_body_buffer_size 16k;
  client_max_body_size 1m;
  client_header_buffer_size 1k;
  large_client_header_buffers 4 8k;

  client_body_timeout 30s;
  client_header_timeout 10s;
    
  keepalive_timeout 30s;
  send_timeout 20s;

  add_header servercache_status $upstream_cache_status;

  location / {
    expires 3d;
    try_files $uri $uri/ =404;
  }

  location /api {
      if  ($http_cookie ~* ".+"){
        set $cookie_cache_bypass 1;
      }
      if  ($request_uri ~* "/api/orders"){
        set $cookie_cache_bypass 1;
      }

      proxy_cache_bypass $cookie_cache_bypass;
      proxy_cache all;
      proxy_cache_methods GET HEAD;
      proxy_cache_valid 404 502 503 5m;
      proxy_cache_valid any 1h;
      proxy_cache_use_stale error timeout invalid_header updating;

      proxy_pass http://{{ $host }};
  }
}
{{ end }}