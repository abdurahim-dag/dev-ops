stages:
  - build
  - test
  - release
  - notify

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

cache:
  paths:
    - frontend/dist/frontend

include:
  - template: Security/SAST.gitlab-ci.yml

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/momo-frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

build-frontend-code-job:
  stage: build
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist

sonarqube-frontend-sast:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: test
  needs:
    - build-frontend-code-job
  variables:
    SONAR_TOKEN: $SONAR_MOMO_FRONTEND_TOKEN
  script:
    - cd frontend/
    - sonar-scanner
      -Dsonar.organization=$SONAR_ORGANIZATION
      -Dsonar.sources=./
      -Dsonar.host.url=$SONAR_URL
      -Dsonar.projectKey=$SONAR_PROJECT_NAME_FRONTEND
      -Dsonar.branch.name=main

release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  cache: []
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA latest
    - crane tag $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA $VERSION
  when: manual

telegram-notification-frontend:
  stage: notify
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\": \"$TELEGRAM_ID\", \"text\": \"std-022-044 собрал приложение frontend. Artifacts: $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-frontend-code-job\"}" "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage"'
  when: manual